module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/dist/";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(324);


/***/ }),

/***/ 3:
/***/ (function(module, exports) {

	/* globals __VUE_SSR_CONTEXT__ */

	// this module is a runtime utility for cleaner component module output and will
	// be included in the final webpack user bundle

	module.exports = function normalizeComponent (
	  rawScriptExports,
	  compiledTemplate,
	  injectStyles,
	  scopeId,
	  moduleIdentifier /* server only */
	) {
	  var esModule
	  var scriptExports = rawScriptExports = rawScriptExports || {}

	  // ES6 modules interop
	  var type = typeof rawScriptExports.default
	  if (type === 'object' || type === 'function') {
	    esModule = rawScriptExports
	    scriptExports = rawScriptExports.default
	  }

	  // Vue.extend constructor export interop
	  var options = typeof scriptExports === 'function'
	    ? scriptExports.options
	    : scriptExports

	  // render functions
	  if (compiledTemplate) {
	    options.render = compiledTemplate.render
	    options.staticRenderFns = compiledTemplate.staticRenderFns
	  }

	  // scopedId
	  if (scopeId) {
	    options._scopeId = scopeId
	  }

	  var hook
	  if (moduleIdentifier) { // server build
	    hook = function (context) {
	      // 2.3 injection
	      context =
	        context || // cached call
	        (this.$vnode && this.$vnode.ssrContext) || // stateful
	        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional
	      // 2.2 with runInNewContext: true
	      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
	        context = __VUE_SSR_CONTEXT__
	      }
	      // inject component styles
	      if (injectStyles) {
	        injectStyles.call(this, context)
	      }
	      // register component module identifier for async chunk inferrence
	      if (context && context._registeredComponents) {
	        context._registeredComponents.add(moduleIdentifier)
	      }
	    }
	    // used by ssr in case component is cached and beforeCreate
	    // never gets called
	    options._ssrRegister = hook
	  } else if (injectStyles) {
	    hook = injectStyles
	  }

	  if (hook) {
	    var functional = options.functional
	    var existing = functional
	      ? options.render
	      : options.beforeCreate
	    if (!functional) {
	      // inject component registration as beforeCreate hook
	      options.beforeCreate = existing
	        ? [].concat(existing, hook)
	        : [hook]
	    } else {
	      // register for functioal component in vue file
	      options.render = function renderWithStyleInjection (h, context) {
	        hook.call(context)
	        return existing(h, context)
	      }
	    }
	  }

	  return {
	    esModule: esModule,
	    exports: scriptExports,
	    options: options
	  }
	}


/***/ }),

/***/ 10:
/***/ (function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	// css base code, injected by the css-loader
	module.exports = function() {
		var list = [];

		// return the list of modules as css string
		list.toString = function toString() {
			var result = [];
			for(var i = 0; i < this.length; i++) {
				var item = this[i];
				if(item[2]) {
					result.push("@media " + item[2] + "{" + item[1] + "}");
				} else {
					result.push(item[1]);
				}
			}
			return result.join("");
		};

		// import a list of modules into the list
		list.i = function(modules, mediaQuery) {
			if(typeof modules === "string")
				modules = [[null, modules, ""]];
			var alreadyImportedModules = {};
			for(var i = 0; i < this.length; i++) {
				var id = this[i][0];
				if(typeof id === "number")
					alreadyImportedModules[id] = true;
			}
			for(i = 0; i < modules.length; i++) {
				var item = modules[i];
				// skip already imported module
				// this implementation is not 100% perfect for weird media query combinations
				//  when a module is imported multiple times with different media queries.
				//  I hope this will never occur (Hey this way we have smaller bundles)
				if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
					if(mediaQuery && !item[2]) {
						item[2] = mediaQuery;
					} else if(mediaQuery) {
						item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
					}
					list.push(item);
				}
			}
		};
		return list;
	};


/***/ }),

/***/ 11:
/***/ (function(module, exports, __webpack_require__) {

	/*
	  MIT License http://www.opensource.org/licenses/mit-license.php
	  Author Tobias Koppers @sokra
	  Modified by Evan You @yyx990803
	*/

	var hasDocument = typeof document !== 'undefined'

	if (false) {
	  if (!hasDocument) {
	    throw new Error(
	    'vue-style-loader cannot be used in a non-browser environment. ' +
	    "Use { target: 'node' } in your Webpack config to indicate a server-rendering environment."
	  ) }
	}

	var listToStyles = __webpack_require__(12)

	/*
	type StyleObject = {
	  id: number;
	  parts: Array<StyleObjectPart>
	}

	type StyleObjectPart = {
	  css: string;
	  media: string;
	  sourceMap: ?string
	}
	*/

	var stylesInDom = {/*
	  [id: number]: {
	    id: number,
	    refs: number,
	    parts: Array<(obj?: StyleObjectPart) => void>
	  }
	*/}

	var head = hasDocument && (document.head || document.getElementsByTagName('head')[0])
	var singletonElement = null
	var singletonCounter = 0
	var isProduction = false
	var noop = function () {}

	// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
	// tags it will allow on a page
	var isOldIE = typeof navigator !== 'undefined' && /msie [6-9]\b/.test(navigator.userAgent.toLowerCase())

	module.exports = function (parentId, list, _isProduction) {
	  isProduction = _isProduction

	  var styles = listToStyles(parentId, list)
	  addStylesToDom(styles)

	  return function update (newList) {
	    var mayRemove = []
	    for (var i = 0; i < styles.length; i++) {
	      var item = styles[i]
	      var domStyle = stylesInDom[item.id]
	      domStyle.refs--
	      mayRemove.push(domStyle)
	    }
	    if (newList) {
	      styles = listToStyles(parentId, newList)
	      addStylesToDom(styles)
	    } else {
	      styles = []
	    }
	    for (var i = 0; i < mayRemove.length; i++) {
	      var domStyle = mayRemove[i]
	      if (domStyle.refs === 0) {
	        for (var j = 0; j < domStyle.parts.length; j++) {
	          domStyle.parts[j]()
	        }
	        delete stylesInDom[domStyle.id]
	      }
	    }
	  }
	}

	function addStylesToDom (styles /* Array<StyleObject> */) {
	  for (var i = 0; i < styles.length; i++) {
	    var item = styles[i]
	    var domStyle = stylesInDom[item.id]
	    if (domStyle) {
	      domStyle.refs++
	      for (var j = 0; j < domStyle.parts.length; j++) {
	        domStyle.parts[j](item.parts[j])
	      }
	      for (; j < item.parts.length; j++) {
	        domStyle.parts.push(addStyle(item.parts[j]))
	      }
	      if (domStyle.parts.length > item.parts.length) {
	        domStyle.parts.length = item.parts.length
	      }
	    } else {
	      var parts = []
	      for (var j = 0; j < item.parts.length; j++) {
	        parts.push(addStyle(item.parts[j]))
	      }
	      stylesInDom[item.id] = { id: item.id, refs: 1, parts: parts }
	    }
	  }
	}

	function createStyleElement () {
	  var styleElement = document.createElement('style')
	  styleElement.type = 'text/css'
	  head.appendChild(styleElement)
	  return styleElement
	}

	function addStyle (obj /* StyleObjectPart */) {
	  var update, remove
	  var styleElement = document.querySelector('style[data-vue-ssr-id~="' + obj.id + '"]')

	  if (styleElement) {
	    if (isProduction) {
	      // has SSR styles and in production mode.
	      // simply do nothing.
	      return noop
	    } else {
	      // has SSR styles but in dev mode.
	      // for some reason Chrome can't handle source map in server-rendered
	      // style tags - source maps in <style> only works if the style tag is
	      // created and inserted dynamically. So we remove the server rendered
	      // styles and inject new ones.
	      styleElement.parentNode.removeChild(styleElement)
	    }
	  }

	  if (isOldIE) {
	    // use singleton mode for IE9.
	    var styleIndex = singletonCounter++
	    styleElement = singletonElement || (singletonElement = createStyleElement())
	    update = applyToSingletonTag.bind(null, styleElement, styleIndex, false)
	    remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true)
	  } else {
	    // use multi-style-tag mode in all other cases
	    styleElement = createStyleElement()
	    update = applyToTag.bind(null, styleElement)
	    remove = function () {
	      styleElement.parentNode.removeChild(styleElement)
	    }
	  }

	  update(obj)

	  return function updateStyle (newObj /* StyleObjectPart */) {
	    if (newObj) {
	      if (newObj.css === obj.css &&
	          newObj.media === obj.media &&
	          newObj.sourceMap === obj.sourceMap) {
	        return
	      }
	      update(obj = newObj)
	    } else {
	      remove()
	    }
	  }
	}

	var replaceText = (function () {
	  var textStore = []

	  return function (index, replacement) {
	    textStore[index] = replacement
	    return textStore.filter(Boolean).join('\n')
	  }
	})()

	function applyToSingletonTag (styleElement, index, remove, obj) {
	  var css = remove ? '' : obj.css

	  if (styleElement.styleSheet) {
	    styleElement.styleSheet.cssText = replaceText(index, css)
	  } else {
	    var cssNode = document.createTextNode(css)
	    var childNodes = styleElement.childNodes
	    if (childNodes[index]) styleElement.removeChild(childNodes[index])
	    if (childNodes.length) {
	      styleElement.insertBefore(cssNode, childNodes[index])
	    } else {
	      styleElement.appendChild(cssNode)
	    }
	  }
	}

	function applyToTag (styleElement, obj) {
	  var css = obj.css
	  var media = obj.media
	  var sourceMap = obj.sourceMap

	  if (media) {
	    styleElement.setAttribute('media', media)
	  }

	  if (sourceMap) {
	    // https://developer.chrome.com/devtools/docs/javascript-debugging
	    // this makes source maps inside style tags work properly in Chrome
	    css += '\n/*# sourceURL=' + sourceMap.sources[0] + ' */'
	    // http://stackoverflow.com/a/26603875
	    css += '\n/*# sourceMappingURL=data:application/json;base64,' + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + ' */'
	  }

	  if (styleElement.styleSheet) {
	    styleElement.styleSheet.cssText = css
	  } else {
	    while (styleElement.firstChild) {
	      styleElement.removeChild(styleElement.firstChild)
	    }
	    styleElement.appendChild(document.createTextNode(css))
	  }
	}


/***/ }),

/***/ 12:
/***/ (function(module, exports) {

	/**
	 * Translates the list format produced by css-loader into something
	 * easier to manipulate.
	 */
	module.exports = function listToStyles (parentId, list) {
	  var styles = []
	  var newStyles = {}
	  for (var i = 0; i < list.length; i++) {
	    var item = list[i]
	    var id = item[0]
	    var css = item[1]
	    var media = item[2]
	    var sourceMap = item[3]
	    var part = {
	      id: parentId + ':' + i,
	      css: css,
	      media: media,
	      sourceMap: sourceMap
	    }
	    if (!newStyles[id]) {
	      styles.push(newStyles[id] = { id: id, parts: [part] })
	    } else {
	      newStyles[id].parts.push(part)
	    }
	  }
	  return styles
	}


/***/ }),

/***/ 93:
/***/ (function(module, exports) {

	module.exports = require("ifbp-element/lib/transitions/collapse-transition");

/***/ }),

/***/ 324:
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _ifbpSearch = __webpack_require__(325);

	var _ifbpSearch2 = _interopRequireDefault(_ifbpSearch);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/* istanbul ignore next */
	_ifbpSearch2.default.install = function (Vue) {
	  Vue.component(_ifbpSearch2.default.name, _ifbpSearch2.default);
	};

	exports.default = _ifbpSearch2.default;

/***/ }),

/***/ 325:
/***/ (function(module, exports, __webpack_require__) {

	function injectStyle (ssrContext) {
	  __webpack_require__(326)
	}
	var Component = __webpack_require__(3)(
	  /* script */
	  __webpack_require__(328),
	  /* template */
	  __webpack_require__(329),
	  /* styles */
	  injectStyle,
	  /* scopeId */
	  null,
	  /* moduleIdentifier (server only) */
	  null
	)

	module.exports = Component.exports


/***/ }),

/***/ 326:
/***/ (function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(327);
	if(typeof content === 'string') content = [[module.id, content, '']];
	if(content.locals) module.exports = content.locals;
	// add the styles to the DOM
	var update = __webpack_require__(11)("42057385", content, true);

/***/ }),

/***/ 327:
/***/ (function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(10)();
	// imports


	// module
	exports.push([module.id, "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", ""]);

	// exports


/***/ }),

/***/ 328:
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _collapseTransition = __webpack_require__(93);

	var _collapseTransition2 = _interopRequireDefault(_collapseTransition);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = {
	  name: 'IfbpSearch',
	  props: {
	    // 搜索模板对象
	    searchTemplate: Object,

	    // 是否显示已选中标签
	    showSelectedTags: {
	      type: Boolean,
	      default: false
	    },

	    // 高级搜索前展示的条数, 默认3
	    conditionsBeforeAdvance: {
	      type: [Number, String],
	      default: 3
	    },

	    // 模板 code 值
	    templateCode: {
	      type: String
	    }
	  },
	  components: {
	    ElCollapseTransition: _collapseTransition2.default
	  },
	  data: function data() {
	    return {
	      // 搜索面板显示
	      panelShown: false,
	      // 搜索框 placeholder
	      searchPlaceholder: '',
	      // 条件列表
	      conditionList: [],
	      // 当前打开的高级条件编号
	      currentConditionCode: '',
	      // 当前打开的高级条件内容
	      currentCondition: null,
	      // 当前查询模板对象
	      currentTpl: null,

	      // 日期类型系统变量
	      sysVarOptions: []
	    };
	  },
	  created: function created() {
	    if (this.templateCode) {
	      this.requestSearchTpl();
	    } else if (this.searchTemplate) {
	      this.currentTpl = this.searchTemplate;
	      this.initSearchTpl();
	    } else {
	      console.log('创建查询模板失败, 未传入searchTemplate或templateCode参数');
	    }
	  },

	  methods: {
	    // 初始化 tpl
	    initSearchTpl: function initSearchTpl() {
	      this.searchPlaceholder = this.formatPlaceholder(this.currentTpl.keyword.fields);
	      var conditionList = this.currentTpl.conditionList;
	      for (var i = 0; i < conditionList.length; i++) {
	        var condition = conditionList[i];
	        if (!condition.optionList) {
	          condition.optionList = {
	            def_min_value: null,
	            def_max_value: null,
	            value: null,
	            options: []
	          };
	          continue;
	        }
	        var optionList = condition.optionList;
	        if (typeof optionList.def_min_value === 'undefined') {
	          this.$set(optionList, 'def_min_value', null);
	        }
	        if (typeof optionList.def_max_value === 'undefined') {
	          this.$set(optionList, 'def_max_value', null);
	        }
	        if (typeof optionList.value === 'undefined') {
	          this.$set(optionList, 'value', null);
	        }
	        if (typeof optionList.options === 'undefined') {
	          this.$set(optionList, 'options', []);
	        }
	      }
	      this.conditionList = conditionList;
	      this.initConditionListStatus();
	      this.requestSysVars(this.formatSysVarOption);
	    },

	    // 触发搜索事件
	    search: function search() {
	      this.panelShown = false;
	      this.setCurrentCondition();
	      this.$emit('search', this.currentTpl);
	    },

	    // 切换高级搜索显示状态
	    showSearchPanel: function showSearchPanel() {
	      this.movePanelToParentNode();
	      this.panelShown = !this.panelShown;
	      this.setCurrentCondition();
	    },

	    // 搜索框 placeholder
	    formatPlaceholder: function formatPlaceholder(fields) {
	      var keywords = [];
	      for (var i = 0; i < fields.length; i++) {
	        var field = fields[i];
	        var keyword = field.fieldname;
	        if (keyword && field.iskeyword) {
	          keywords.push(keyword);
	        }
	      }
	      return '搜索' + keywords.join('/');
	    },


	    /**
	      * 高级搜索
	      */

	    //  获取数据后检查是否有选中选项, 用以高亮已选条件
	    initConditionListStatus: function initConditionListStatus() {
	      var conditionList = this.conditionList;
	      for (var i = this.conditionsBeforeAdvance; i < conditionList.length; i++) {
	        // 第四条开始
	        var condition = conditionList[i];
	        var optionList = condition.optionList;
	        var options = optionList.options;
	        this.$set(optionList, 'feOptionSelected', false);
	        // optionList.feOptionSelected = false;
	        if (!optionList) {
	          continue;
	        }
	        if (optionList.def_min_value || optionList.def_max_value) {
	          // console.log(optionList.def_min_value, optionList.def_max_value);
	          optionList.feOptionSelected = true;
	          continue;
	        }
	        for (var j = 0; j < options.length; j++) {
	          var option = options[j];
	          if (!option) {
	            continue;
	          }
	          if (option.selected) {
	            optionList.feOptionSelected = true;
	          }
	        }
	      }
	    },


	    // 设置选中
	    selectConditionOption: function selectConditionOption(optionList, option) {
	      // console.log(arguments);
	      var optionSelected = false;
	      if (option && option.selected) {
	        optionSelected = true;
	      }
	      if (!optionList.def_min_value && !optionList.def_max_value && (!option || option.selected)) {
	        optionList.feOptionSelected = false;
	      } else {
	        optionList.feOptionSelected = true;
	      }
	      this.unSelectAllOptions(optionList.options);
	      if (option) {
	        option.selected = !optionSelected;
	        this.resetCustomOption(optionList);
	        // if (typeof conditionSequence !== 'undefined') {
	        //   this.clearReferenceComponent();
	        // }
	        this.setCurrentCondition();
	      }
	      this.initConditionListStatus();
	    },


	    // 已选中日期格式整理
	    formatSelectedDate: function formatSelectedDate(startDay, endDay) {
	      var dateString = '';
	      if (startDay && endDay) {
	        dateString = startDay + ' 至 ' + endDay;
	      } else if (startDay) {
	        dateString = startDay + '之后';
	      } else {
	        dateString = endDay + '之前';
	      }
	      return dateString;
	    },


	    // 已选中数值格式整理
	    formatSelectedNumber: function formatSelectedNumber(min, max) {
	      if (min && max) {
	        return min + '-' + max + '万元';
	      } else if (min) {
	        return min + '万元及以上';
	      } else {
	        return '低于' + max + '万元';
	      }
	    },


	    // 整理date格式
	    formatDate: function formatDate(time) {
	      var date = new Date(time);
	      return date.getFullYear() + '-' + (date.getMonth() >= 9 ? date.getMonth() + 1 : '0' + (date.getMonth() + 1)) + '-' + (date.getDate() > 9 ? date.getDate() : '0' + date.getDate()) + ' ' + (date.getHours() > 9 ? date.getHours() : '0' + date.getHours()) + ':' + (date.getMinutes() > 9 ? date.getMinutes() : '0' + date.getMinutes()) + ':' + (date.getSeconds() > 9 ? date.getSeconds() : '0' + date.getSeconds());
	    },


	    // 触发date组件change事件时, 使用格式化后的值
	    handleDateChange: function handleDateChange(optionList, key, formatedValue) {
	      optionList[key] = formatedValue;
	      this.unSelectAllOptions(optionList.options);
	      // 如果不是由选择系统变量触发的 date change, 重置系统变量 select
	      if (!optionList.value) {
	        return;
	      }
	      if (key === 'def_min_value' && formatedValue !== optionList.value[0] || key === 'def_max_value' && formatedValue !== optionList.value[1]) {
	        optionList.value = null;
	      }
	    },


	    // 取消选中
	    cancelConditionSelection: function cancelConditionSelection(optionList) {
	      this.unSelectAllOptions(optionList.options);
	      this.resetCustomOption(optionList);
	      // if (typeof conditionSequence !== 'undefined') {
	      //   this.clearReferenceComponent();
	      // }
	      this.setCurrentCondition();
	    },


	    // 设置当前选中的高级条件
	    setCurrentCondition: function setCurrentCondition(condition) {
	      if (!condition || this.currentConditionCode === condition.fieldcode) {
	        this.currentConditionCode = '';
	        this.currentCondition = null;
	      } else {
	        this.currentConditionCode = condition.fieldcode;
	        this.currentCondition = condition;
	      }
	    },


	    // 点击清空按钮
	    clearSelectedOptions: function clearSelectedOptions() {
	      var conditions = this.conditionList;
	      for (var i = 0; i < conditions.length; i++) {
	        this.cancelConditionSelection(conditions[i].optionList);
	      }
	    },


	    // 已选中参照
	    formatSelectedReference: function formatSelectedReference(optionList) {
	      var refValue = optionList.value;
	      if (optionList.beanMap && optionList.beanMap.value_ref && optionList.beanMap.value_ref[refValue] && optionList.beanMap.value_ref[refValue].name) {
	        return optionList.beanMap.value_ref[refValue].name;
	      }

	      return refValue;
	    },


	    // 参照值改变事件处理
	    handleRefChange: function handleRefChange(optionList, event) {
	      var options = optionList.options;
	      if (event !== 'change' || !options || !options.length) {
	        return;
	      }
	      this.unSelectAllOptions(options);
	    },


	    // 重置自定义条件
	    resetCustomOption: function resetCustomOption(optionList) {
	      optionList.feOptionSelected = false;
	      optionList.def_min_value = null;
	      optionList.def_max_value = null;
	      optionList.value = null;
	      if (optionList.beanMap) {
	        optionList.beanMap = null;
	      }
	    },


	    // 获取查询模板
	    requestSearchTpl: function requestSearchTpl() {
	      var _this = this;

	      var requestUrl = '/ifbp-app-sm-qt-web/quyerTemplate/getByCode';
	      this.$http({
	        url: requestUrl,
	        method: 'post',
	        data: this.templateCode,
	        dataType: 'json',
	        headers: {
	          'Content-Type': 'application/json'
	        }
	      }).then(function (res) {
	        if (res.data && res.data.success) {
	          _this.currentTpl = res.data.data;
	          _this.initSearchTpl();
	        } else if (!res.data.success) {
	          console.log('request search template failed: ', res.data);
	        }
	      }).catch(function () {
	        console.log('未获取到查询模板');
	      });
	    },


	    // 将搜索panel移至父级容器
	    movePanelToParentNode: function movePanelToParentNode() {
	      var el = this.$el;
	      var searchPanel = el.querySelector('.advanced-search-panel');
	      if (!searchPanel) {
	        return;
	      }
	      var parent = el.parentNode;
	      parent.parentNode.insertBefore(searchPanel, parent.nextSibling);
	      console.log('Search panel dom moved to parnet node.');
	    },


	    // 获取系统变量
	    requestSysVars: function requestSysVars(callback) {
	      var _this2 = this;

	      if (this.sysVarOptions && this.sysVarOptions.length) {
	        if (typeof callback === 'function') {
	          callback();
	        }
	        return;
	      }
	      var requestUrl = '/ifbp-app-sm-qt-web/sysVariable/queryAll';
	      this.$http({
	        url: requestUrl,
	        method: 'post',
	        dataType: 'json'
	      }).then(function (res) {
	        if (res.data.success) {
	          _this2.sysVarOptions = res.data.data;
	          if (typeof callback === 'function') {
	            callback();
	          }
	        } else {
	          console.log('获取系统变量失败', JSON.stringify(res.data.data));
	        }
	      }).catch(function () {
	        _this2.$message({
	          message: '获取系统变量失败',
	          type: 'error'
	        });
	      });
	    },


	    // 给系统变量类型选项 max_value 和 min_value 赋值
	    formatSysVarOption: function formatSysVarOption() {
	      var _this3 = this;

	      if (!this.conditionList || !this.conditionList.length) {
	        return;
	      }
	      this.conditionList.forEach(function (condition) {
	        condition.optionList.options.forEach(function (option) {
	          if (option.issysflag && option.value) {
	            _this3.sysVarOptions.every(function (sysVarOption) {
	              if (sysVarOption.code === option.value && sysVarOption.preview) {
	                option.min_value = sysVarOption.preview[0];
	                option.max_value = sysVarOption.preview[1];
	                return false;
	              }
	              return true;
	            });
	          }
	        });
	      });
	    },


	    // 处理系统变量改变
	    handleSysVarChange: function handleSysVarChange(optionList, val) {
	      if (!val) {
	        return;
	      }
	      optionList.def_min_value = val[0];
	      optionList.def_max_value = val[1];
	    },


	    // 取消选中所有选项
	    unSelectAllOptions: function unSelectAllOptions(options) {
	      options.forEach(function (option) {
	        option.selected = false;
	      });
	    }
	  }
	}; //
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//

/***/ }),

/***/ 329:
/***/ (function(module, exports) {

	module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
	  return (_vm.currentTpl) ? _c('div', [_c('div', {
	    staticClass: "search-input-container"
	  }, [(_vm.currentTpl.keyword.fields.length) ? _c('el-input', {
	    attrs: {
	      "placeholder": _vm.searchPlaceholder,
	      "icon": "search",
	      "on-icon-click": _vm.search
	    },
	    nativeOn: {
	      "keyup": function($event) {
	        if (!('button' in $event) && _vm._k($event.keyCode, "enter", 13)) { return null; }
	        _vm.search($event)
	      }
	    },
	    model: {
	      value: (_vm.currentTpl.keyword.value),
	      callback: function($$v) {
	        _vm.currentTpl.keyword.value = $$v
	      },
	      expression: "currentTpl.keyword.value"
	    }
	  }) : _vm._e(), (_vm.conditionList && _vm.conditionList.length) ? _c('span', {
	    staticClass: "btn-more",
	    class: {
	      active: this.panelShown
	    },
	    on: {
	      "click": _vm.showSearchPanel
	    }
	  }, [_vm._v("\n      高级\n      "), (this.panelShown) ? _c('i', {
	    staticClass: "el-icon-arrow-up"
	  }) : _c('i', {
	    staticClass: "el-icon-arrow-down"
	  })]) : _vm._e()], 1), _c('el-collapse-transition', [_c('div', {
	    directives: [{
	      name: "show",
	      rawName: "v-show",
	      value: (this.panelShown),
	      expression: "this.panelShown"
	    }],
	    staticClass: "advanced-search-panel"
	  }, [(_vm.showSelectedTags) ? _c('div', {
	    staticClass: "options-selected"
	  }, [_vm._l((_vm.conditionList), function(condition) {
	    return [(condition.ctrltype === 'DateTime' && (condition.optionList.def_min_value || condition.optionList.def_max_value)) ? _c('el-tag', {
	      key: condition.fieldcode,
	      attrs: {
	        "closable": true,
	        "type": "gray"
	      },
	      on: {
	        "close": function($event) {
	          _vm.cancelConditionSelection(condition.optionList)
	        }
	      }
	    }, [_vm._v("\n            " + _vm._s(_vm.formatSelectedDate(condition.optionList.def_min_value, condition.optionList.def_max_value)) + "\n          ")]) : _vm._e(), (condition.ctrltype === 'NumberComponent' && (condition.optionList.def_min_value || condition.optionList.def_max_value)) ? _c('el-tag', {
	      key: condition.fieldcode,
	      attrs: {
	        "closable": true,
	        "type": "gray"
	      },
	      on: {
	        "close": function($event) {
	          _vm.cancelConditionSelection(condition.optionList)
	        }
	      }
	    }, [_vm._v("\n            " + _vm._s(_vm.formatSelectedNumber(condition.optionList.def_min_value, condition.optionList.def_max_value)) + "\n          ")]) : _vm._e(), (condition.ctrltype === 'Reference' && condition.optionList.value) ? _c('el-tag', {
	      key: condition.fieldcode,
	      attrs: {
	        "closable": true,
	        "type": "gray"
	      },
	      on: {
	        "close": function($event) {
	          _vm.cancelConditionSelection(condition.optionList)
	        }
	      }
	    }, [_vm._v("\n            " + _vm._s(_vm.formatSelectedReference(condition.optionList)) + "\n          ")]) : _vm._e(), _vm._l((condition.optionList.options), function(option) {
	      return (option.selected) ? _c('el-tag', {
	        key: option.value,
	        attrs: {
	          "closable": true,
	          "type": "gray"
	        },
	        on: {
	          "close": function($event) {
	            _vm.cancelConditionSelection(condition.optionList)
	          }
	        }
	      }, [_vm._v("\n            " + _vm._s(option.name) + "\n          ")]) : _vm._e()
	    })]
	  })], 2) : _vm._e(), _c('div', [_vm._l((_vm.conditionList), function(condition, index) {
	    return (index < _vm.conditionsBeforeAdvance) ? _c('div', {
	      key: condition.fieldcode,
	      staticClass: "condition-row"
	    }, [_c('span', {
	      staticClass: "condition-label"
	    }, [_vm._v(_vm._s(condition.fieldname) + ":")]), _c('div', {
	      staticClass: "condition-options"
	    }, [(condition.optionList.options.length) ? _vm._l((condition.optionList.options), function(option, optionIndex) {
	      return _c('span', {
	        key: optionIndex,
	        staticClass: "condition-option",
	        class: {
	          selected: option.selected
	        },
	        on: {
	          "click": function($event) {
	            _vm.selectConditionOption(condition.optionList, option)
	          }
	        }
	      }, [_vm._v(_vm._s(option.name))])
	    }) : _vm._e(), (condition.ctrltype === 'NumberComponent') ? [_c('div', {
	      staticClass: "option-num-container"
	    }, [_c('el-input', {
	      attrs: {
	        "size": "small",
	        "placeholder": "最小值"
	      },
	      on: {
	        "change": function($event) {
	          _vm.selectConditionOption(condition.optionList, null)
	        }
	      },
	      model: {
	        value: (condition.optionList.def_min_value),
	        callback: function($$v) {
	          condition.optionList.def_min_value = $$v
	        },
	        expression: "condition.optionList.def_min_value"
	      }
	    })], 1), _vm._v("\n                -\n              "), _c('div', {
	      staticClass: "option-num-container"
	    }, [_c('el-input', {
	      attrs: {
	        "size": "small",
	        "placeholder": "最大值"
	      },
	      on: {
	        "change": function($event) {
	          _vm.selectConditionOption(condition.optionList, null)
	        }
	      },
	      model: {
	        value: (condition.optionList.def_max_value),
	        callback: function($$v) {
	          condition.optionList.def_max_value = $$v
	        },
	        expression: "condition.optionList.def_max_value"
	      }
	    })], 1)] : (condition.ctrltype === 'DateTime') ? [_c('div', {
	      staticClass: "option-date-container"
	    }, [_c('el-date-picker', {
	      attrs: {
	        "type": "datetime",
	        "size": "small",
	        "placeholder": "选择日期时间"
	      },
	      on: {
	        "change": function($event) {
	          _vm.handleDateChange(condition.optionList, 'def_min_value', $event)
	        }
	      },
	      model: {
	        value: (condition.optionList.def_min_value),
	        callback: function($$v) {
	          condition.optionList.def_min_value = $$v
	        },
	        expression: "condition.optionList.def_min_value"
	      }
	    })], 1), _vm._v("\n                -\n              "), _c('div', {
	      staticClass: "option-date-container"
	    }, [_c('el-date-picker', {
	      attrs: {
	        "type": "datetime",
	        "size": "small",
	        "placeholder": "选择日期时间"
	      },
	      on: {
	        "change": function($event) {
	          _vm.handleDateChange(condition.optionList, 'def_max_value', $event)
	        }
	      },
	      model: {
	        value: (condition.optionList.def_max_value),
	        callback: function($$v) {
	          condition.optionList.def_max_value = $$v
	        },
	        expression: "condition.optionList.def_max_value"
	      }
	    })], 1), (_vm.sysVarOptions && _vm.sysVarOptions.length) ? _c('div', {
	      staticClass: "option-date-container"
	    }, [_c('el-select', {
	      attrs: {
	        "size": "small",
	        "placeholder": "可选择系统变量"
	      },
	      on: {
	        "change": function($event) {
	          _vm.handleSysVarChange(condition.optionList, $event)
	        }
	      },
	      model: {
	        value: (condition.optionList.value),
	        callback: function($$v) {
	          condition.optionList.value = $$v
	        },
	        expression: "condition.optionList.value"
	      }
	    }, _vm._l((_vm.sysVarOptions), function(sysVar, sysVarIndex) {
	      return _c('el-option', {
	        key: sysVarIndex,
	        attrs: {
	          "label": sysVar.name,
	          "value": sysVar.preview
	        }
	      })
	    }))], 1) : _vm._e()] : _vm._e(), (condition.ctrltype === 'Reference' && condition.refcode) ? [_c('div', {
	      staticClass: "option-ref-container"
	    }, [_c('el-ref', {
	      attrs: {
	        "is-muti-select": true,
	        "ref-code": condition.refcode,
	        "field": "value",
	        "template-value": condition.optionList,
	        "is-edit": true
	      },
	      on: {
	        "trigger": function($event) {
	          _vm.handleRefChange(condition.optionList, $event)
	        }
	      }
	    })], 1)] : _vm._e()], 2)]) : _vm._e()
	  }), (_vm.conditionList.length > _vm.conditionsBeforeAdvance) ? _c('div', {
	    staticClass: "condition-row"
	  }, [_c('span', {
	    staticClass: "condition-label"
	  }, [_vm._v("高级:")]), _c('div', {
	    staticClass: "advanced-conditions"
	  }, _vm._l((_vm.conditionList), function(condition, index) {
	    return (index >= _vm.conditionsBeforeAdvance) ? _c('span', {
	      key: condition.fieldcode,
	      staticClass: "advanced-condition",
	      class: {
	        current: _vm.currentConditionCode === condition.fieldcode,
	          selected: condition.optionList.feOptionSelected
	      },
	      on: {
	        "click": function($event) {
	          _vm.setCurrentCondition(condition)
	        }
	      }
	    }, [_vm._v("\n              " + _vm._s(condition.fieldname) + "\n              "), (_vm.currentConditionCode === condition.fieldcode) ? _c('i', {
	      staticClass: "el-icon-arrow-up"
	    }) : _c('i', {
	      staticClass: "el-icon-arrow-down"
	    })]) : _vm._e()
	  }))]) : _vm._e()], 2), _c('div', {
	    staticClass: "advanced-search-btns"
	  }, [_c('el-button', {
	    staticClass: "button-no-radius",
	    attrs: {
	      "type": "primary"
	    },
	    on: {
	      "click": _vm.search
	    }
	  }, [_vm._v("搜索")]), _c('el-button', {
	    staticClass: "button-no-radius",
	    on: {
	      "click": _vm.clearSelectedOptions
	    }
	  }, [_vm._v("清空")])], 1), _c('div', {
	    staticClass: "current-condition-options-container"
	  }, [(_vm.currentCondition) ? _c('div', {
	    staticClass: "current-condition-options"
	  }, [(_vm.currentCondition.optionList.options.length) ? _vm._l((_vm.currentCondition.optionList.options), function(option, optionIndex) {
	    return _c('span', {
	      key: optionIndex,
	      staticClass: "condition-option",
	      class: {
	        selected: option.selected
	      },
	      on: {
	        "click": function($event) {
	          _vm.selectConditionOption(_vm.currentCondition.optionList, option)
	        }
	      }
	    }, [_vm._v(_vm._s(option.name))])
	  }) : _vm._e(), (_vm.currentCondition.ctrltype === 'NumberComponent') ? [_c('div', {
	    staticClass: "option-num-container"
	  }, [_c('el-input', {
	    attrs: {
	      "size": "small",
	      "placeholder": "最小值"
	    },
	    on: {
	      "change": function($event) {
	        _vm.selectConditionOption(_vm.currentCondition.optionList, null)
	      }
	    },
	    model: {
	      value: (_vm.currentCondition.optionList.def_min_value),
	      callback: function($$v) {
	        _vm.currentCondition.optionList.def_min_value = $$v
	      },
	      expression: "currentCondition.optionList.def_min_value"
	    }
	  })], 1), _vm._v("\n              -\n            "), _c('div', {
	    staticClass: "option-num-container"
	  }, [_c('el-input', {
	    attrs: {
	      "size": "small",
	      "placeholder": "最大值"
	    },
	    on: {
	      "change": function($event) {
	        _vm.selectConditionOption(_vm.currentCondition.optionList, null)
	      }
	    },
	    model: {
	      value: (_vm.currentCondition.optionList.def_max_value),
	      callback: function($$v) {
	        _vm.currentCondition.optionList.def_max_value = $$v
	      },
	      expression: "currentCondition.optionList.def_max_value"
	    }
	  })], 1)] : (_vm.currentCondition.ctrltype === 'DateTime') ? [_c('div', {
	    staticClass: "option-date-container"
	  }, [_c('el-date-picker', {
	    attrs: {
	      "type": "datetime",
	      "size": "small",
	      "placeholder": "选择日期时间"
	    },
	    on: {
	      "change": function($event) {
	        _vm.handleDateChange(_vm.currentCondition.optionList, 'def_min_value', $event)
	      }
	    },
	    model: {
	      value: (_vm.currentCondition.optionList.def_min_value),
	      callback: function($$v) {
	        _vm.currentCondition.optionList.def_min_value = $$v
	      },
	      expression: "currentCondition.optionList.def_min_value"
	    }
	  })], 1), _vm._v("\n              -\n            "), _c('div', {
	    staticClass: "option-date-container"
	  }, [_c('el-date-picker', {
	    attrs: {
	      "type": "datetime",
	      "size": "small",
	      "placeholder": "选择日期时间"
	    },
	    on: {
	      "change": function($event) {
	        _vm.handleDateChange(_vm.currentCondition.optionList, 'def_max_value', $event)
	      }
	    },
	    model: {
	      value: (_vm.currentCondition.optionList.def_max_value),
	      callback: function($$v) {
	        _vm.currentCondition.optionList.def_max_value = $$v
	      },
	      expression: "currentCondition.optionList.def_max_value"
	    }
	  })], 1), (_vm.sysVarOptions && _vm.sysVarOptions.length) ? _c('div', {
	    staticClass: "option-date-container"
	  }, [_c('el-select', {
	    attrs: {
	      "size": "small",
	      "placeholder": "可选择系统变量"
	    },
	    on: {
	      "change": function($event) {
	        _vm.handleSysVarChange(_vm.currentCondition.optionList, $event)
	      }
	    },
	    model: {
	      value: (_vm.currentCondition.optionList.value),
	      callback: function($$v) {
	        _vm.currentCondition.optionList.value = $$v
	      },
	      expression: "currentCondition.optionList.value"
	    }
	  }, _vm._l((_vm.sysVarOptions), function(sysVar, sysVarIndex) {
	    return _c('el-option', {
	      key: sysVarIndex,
	      attrs: {
	        "label": sysVar.name,
	        "value": sysVar.preview
	      }
	    })
	  }))], 1) : _vm._e()] : _vm._e(), (_vm.currentCondition.ctrltype === 'Reference' && _vm.currentCondition.refcode) ? [_c('div', {
	    staticClass: "option-ref-container"
	  }, [_c('el-ref', {
	    attrs: {
	      "is-muti-select": true,
	      "ref-code": _vm.currentCondition.refcode,
	      "field": "value",
	      "template-value": _vm.currentCondition.optionList,
	      "is-edit": true
	    },
	    on: {
	      "trigger": function($event) {
	        _vm.handleRefChange(_vm.currentCondition.optionList, $event)
	      }
	    }
	  })], 1)] : _vm._e()], 2) : _vm._e()])])])], 1) : _vm._e()
	},staticRenderFns: []}

/***/ })

/******/ });